// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: clientstreaming.proto

#include "clientstreaming.pb.h"
#include "clientstreaming.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace clientstreaming {

static const char* ClientStreaming_method_names[] = {
  "/clientstreaming.ClientStreaming/GetServerResponse",
};

std::unique_ptr< ClientStreaming::Stub> ClientStreaming::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientStreaming::Stub> stub(new ClientStreaming::Stub(channel, options));
  return stub;
}

ClientStreaming::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetServerResponse_(ClientStreaming_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::clientstreaming::Message>* ClientStreaming::Stub::GetServerResponseRaw(::grpc::ClientContext* context, ::clientstreaming::Number* response) {
  return ::grpc::internal::ClientWriterFactory< ::clientstreaming::Message>::Create(channel_.get(), rpcmethod_GetServerResponse_, context, response);
}

void ClientStreaming::Stub::async::GetServerResponse(::grpc::ClientContext* context, ::clientstreaming::Number* response, ::grpc::ClientWriteReactor< ::clientstreaming::Message>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::clientstreaming::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetServerResponse_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::clientstreaming::Message>* ClientStreaming::Stub::AsyncGetServerResponseRaw(::grpc::ClientContext* context, ::clientstreaming::Number* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::clientstreaming::Message>::Create(channel_.get(), cq, rpcmethod_GetServerResponse_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::clientstreaming::Message>* ClientStreaming::Stub::PrepareAsyncGetServerResponseRaw(::grpc::ClientContext* context, ::clientstreaming::Number* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::clientstreaming::Message>::Create(channel_.get(), cq, rpcmethod_GetServerResponse_, context, response, false, nullptr);
}

ClientStreaming::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientStreaming_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ClientStreaming::Service, ::clientstreaming::Message, ::clientstreaming::Number>(
          [](ClientStreaming::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::clientstreaming::Message>* reader,
             ::clientstreaming::Number* resp) {
               return service->GetServerResponse(ctx, reader, resp);
             }, this)));
}

ClientStreaming::Service::~Service() {
}

::grpc::Status ClientStreaming::Service::GetServerResponse(::grpc::ServerContext* context, ::grpc::ServerReader< ::clientstreaming::Message>* reader, ::clientstreaming::Number* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace clientstreaming

